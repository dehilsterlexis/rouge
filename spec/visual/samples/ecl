// inline comment

/**************************
This is a multiline comment
***************/

import std.math.job;
IMPORT Str;

// Types
R1 := RECORD
    integer1  F1;
    UNSIGNED4 F2;
    STRING100 F3;
    REAL4     R1;
    REAL8     R2;
    REAL9     R2; // This should not match a type
    boolean   B1;
    decimal23 D1;
    udecimal3 D2;
END;

moose := true;

D1 := dataset('RTTEMP::SomeFile',R1,THOR);
D1 := DATASET('RTTEMP::SomeFile',R1,THOR);

// Templates

#append
#APPEND
#inmodule

// Match
ArcCosine := acos(0.55);
DATA2 MyHexString := x'0D0A'; // a 2-byte hexadecimal string
MyDataString := D'abcd'; // same as: (DATA)'abcd'
MyUnicodeString := U'abcd'; // same as: (UNICODE)'abcd'
MyUnicodeString := U'abcd\353'; // becomes 'abcdÃ«'
MyVarString := V'abcd'; // same as: (VARSTRING)'abcd'
MyQString := Q'ABCD'; // same as: (QSTRING)'ABCD'

MyInt1 := 10; // value of MyInt1 is the INTEGER value 10
MyInt2 := 0x0A; // value of MyInt2 is the INTEGER value 10
MyInt3 := 0Ax; // value of MyInt3 is the INTEGER value 10
MyInt4 := 0b1010; // value of MyInt4 is the INTEGER value 10
MyInt5 := 1010b; // value of MyInt5 is the INTEGER value 10
MyReal := 10.0; // value of MyReal is the REAL value 10.0

MyFunc(STRING1 val, SET OF STRING1 S=ALL) := val IN S;

//check for presence in passed set, if passed

SET OF INTEGER4 MySet := IF(SomeCondition=TRUE,
				[88888,99999,66666,33333,55555],ALL);
MyRecs := MyFile(Zip IN MySet);

// String
str := '\'';
